version: 0.2
env:
  variables:
    SonarStatus: 0
  secrets-manager:
    LOGIN: sonarcloud:TOKEN
    HOST: sonarcloud:HOST
    Organization: sonarcloud:ORG
    Project: sonarcloud:PROJ
phases:
  install:
    commands:
      - echo ========== Starting Install Phase ==========
      - echo updating ENV
      - apt-get update
      - apt-get install -y jq
      - echo getting sonarcloud cli
      - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.7.0.2747-linux.zip
      - unzip ./sonar-scanner-cli-4.7.0.2747-linux.zip
      - echo adding sonarcloud to path
      - if [ -d "$(pwd)/sonar-scanner-4.7.0.2747-linux/bin/" ] ; then echo "Sonarcloud directory exists on codebuild container, adding to path." && export PATH=$PATH:$(pwd)/sonar-scanner-4.7.0.2747-linux/bin/ ;else echo "filepath doesn't exsist, can't find sonarcloud" ;fi
      - echo $PATH
      - echo setting up pipenv and installing packages
      - pipenv install
    finally:
      - echo ========== Finished Install Phase ==========
  pre_build:
    commands:
      - echo ========== Starting Tests and Pre-Build Phase ==========
      - if [ $(pipenv run pytest UnitTests.py | grep -cim1 failed) = 1 ] ;then echo unit Tests failed. && exit 1 ;fi
      - pipenv run coverage report
      - pipenv run coverage xml
      - echo Running Sonarcloud Static analysis
      - sonar-scanner -Dsonar.login=$LOGIN -Dsonar.organization=$Organization -Dsonar.projectKey=$Project -Dsonar.sources=. -Dsonar.host.url=$HOST -Dsonar.python.coverage.reportPaths=coverage.xml
      - curl https://sonarcloud.io/api/qualitygates/project_status?projectKey=$Project >result.json
      - cat result.json
      - if [ $(jq -r '.projectStatus.status' result.json) = ERROR ]; then echo Quality gate note met. && exit 1 ;fi
    finally:
      - echo ========== Finished Pre-Build Phase ==========
  build:
    commands:
      - echo ========== Starting Build Phase ==========
    finally:
      - echo ========== Finished Build Phase ==========
  post_build:
    commands:
      - echo ========== Starting Post Build Phase ==========
    finally:
      - echo ========== Finished Post Build Phase ==========